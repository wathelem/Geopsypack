#!/bin/bash
# Script generated by dpgitconfigure on Apr  2 2020
#
#   Configure script for Linux, Mac OS X and Unix
#
# copyright (C) 2020 Marc Wathelet. All rights reserved.
#
#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#

# Useful functions
absolutePath()
{
  PATH=$1
  if [ "${PATH:0:1}" = "/" ]; then
    echo $PATH
  else
    ABS_PATH=$PWD
    while [ "${PATH:0:3}" = "../" ]; do
      ABS_PATH=${ABS_PATH%/[^/]*}
      PATH=${PATH:3}
    done
    echo $ABS_PATH/$PATH
  fi
}

# Arguments: destination directory, file
# New file must be generated in TEMP_DIR
function replaceFile()
{
  if [ -e $1/$2 ] && diff $1/$2 $TEMP_DIR/$2 > /dev/null; then
    rm $TEMP_DIR/$2
  else
    mv $TEMP_DIR/$2 $1
  fi
}

cleanexit()
{
  rm -rf $TEMP_DIR
  if [ $# = 1 ]; then
    exit $1
  else
    echo
    echo "Aborting..." 1>&2
    exit 2
  fi
}

trap cleanexit INT QUIT
TEMP_DIR=$(mktemp -d /tmp/configure_XXXXXXXXX)

# Platform options
case "$(uname)" in
  Linux) PLATFORM=LINUX ;;
  SunOS) PLATFORM=LINUX ;;
  Darwin) PLATFORM=MAC ;;
  MINGW*) PLATFORM=MINGW ;;
  *)
    echo "Unknown platform $(uname)"
    cleanexit 2
  ;;
esac
# Current shell
if [ "$PLATFORM" = "MINGW" ]; then
  SHELL=sh
else
  SHELL=bash
fi
# Default options
LICENSE_ACCEPTED="no"
SKIP_QT_CHECK="no"
COMMANDLINE=""
SOURCE_DIR=$(cd $(dirname $0) && pwd)
BUILD_DIR=$SOURCE_DIR
while [ "$1" ]; do
  case "$1" in
    "-prefix" | "--prefix" | \
    "-bindir" | "--bindir" | \
    "-libdir" | "--libdir" | \
    "-incdir" | "--incdir" | \
    "-sharedir" | "--sharedir" | \
    "-dest-prefix" | "--dest-prefix" | \
    "-I" | \
    "-L" | \
    "-D" | \
    "-qt-bin-path" | "--qt-bin-path")
      COMMANDLINE="$COMMANDLINE $1"
      shift
      COMMANDLINE="$COMMANDLINE \"$(absolutePath $1)\""
    ;;
    "-cflags" | "--cflags" | \
    "-march" | "--march")
      COMMANDLINE="$COMMANDLINE $1"
      shift
      COMMANDLINE="$COMMANDLINE \"$1\""
    ;;
    "-shared" | "--shared" | \
    "-static" | "--static" | \
    "-no-pch" | "--no-pch" | \
    "-profile" | "--profile" | \
    "-win32" | "--win32" | \
    "-win64" | "--win64" | \
    "-no-svg" | "--no-svg" | \
    "-sse3" | "--sse3" | \
    "-skip-qt-translations" | "--skip-qt-translations")
      COMMANDLINE="$COMMANDLINE $1"
    ;;
    "-builddir" | "--builddir")
      COMMANDLINE="$COMMANDLINE $1"
      shift
      BUILD_DIR="$(absolutePath $1)"
      COMMANDLINE="$COMMANDLINE \"$BUILD_DIR\""
    ;;
    "-rpath" | "--rpath")
      if [ "${2:0:1}" = "-" ]; then
        COMMANDLINE="$COMMANDLINE -rpath"
      else
        shift
        COMMANDLINE="$COMMANDLINE -rpath \"$1\""
      fi
    ;;
    "-accept-license" | "--accept-license")
      LICENSE_ACCEPTED="yes"
      COMMANDLINE="$COMMANDLINE $1"
    ;;
    "-skip-qt-check" | "--skip-qt-check")
      SKIP_QT_CHECK="yes"
      COMMANDLINE="$COMMANDLINE $1"
    ;;
    "-h" | "-help" | "--help")
      echo
      echo "Usage: ./configure [options]"
      echo
      echo "Options:"
      echo
      echo " -qt-bin-path <DIR>  Use Qt in DIR instead of qt in PATH"
      echo " -accept-license     Skip interactive license acceptance"
      echo " -pch                Set precompiled headers on"
      echo
      echo "Installation paths:"
      echo
      echo " -prefix <DIR>       Base directory for installation"
      echo "                       (default /usr/local/Geopsy.org)"
      echo " -bindir <DIR>       Executables will be installed to dir"
      echo "                       (default PREFIX/bin)"
      echo " -libdir <DIR>       Libraries will be installed to dir"
      echo "                       (default PREFIX/lib)"
      echo " -incdir <DIR>       Headers will be installed to dir"
      echo "                       (default PREFIX/include)"
      echo " -sharedir <DIR>     Shared files and translations will be installed"
      echo "                     to dir (default PREFIX/share)"
      echo " -builddir <DIR>     Building in DIR instead of in source dir"
      echo
      echo "Configuration:"
      echo
      echo " -shared             Create and use shared libraries"
      echo " -static             Create and use static libraries"
      echo
      echo " -D <MACRO>          Defines MACRO"
      echo
      echo " -dest-prefix <DIR>  Destination prefix for all binaries"
      echo "                       (default working directory)"
      echo " -rpath <DIR>        Add DIR to library rutime search path"
      echo "                       (default PREFIX/lib, reset to null without DIR)"
      echo " -skip-qt-check      Do not check current Qt version"
      echo " -profile            Turn profiling on, add gcc option '-pg'"
      echo "                       (for development under Linux only)"
      echo " -win32              Turn on cross compilation with i686-mingw32"
      echo "                       (under Linux only)"
      echo " -win64              Turn on cross compilation with x86_64-mingw32"
      echo "                       (under Linux only)"
      echo " -no-svg             Do not compile support for Qt svg"
      echo " -cflags <FLAG>      Add FLAG to the list of compilation flags"
      echo " -sse3               Compile with SSE3 support"
      echo " -march <ARCH>       Specify the name of the target architecture"
      echo "                       Use ARCH=native for auto detection of the CPU's architecture"
      echo "                       Useful link: https://wiki.gentoo.org/wiki/Safe_CFLAGS"
      echo "                       Your architecture is:"
      grep -m1 -A3 "vendor_id" /proc/cpuinfo | awk '{printf("                       ");print}'
      echo
      echo
      echo "Third party libraries:"
      echo
      echo " -I dir              Add dir to the list of directories to be"
      echo "                     searched for headers"
      echo " -L dir              Add dir to the list of directories to be"
      echo "                     searched for libraries"
      echo
      cleanexit 0
    ;;
    *)
      echo "Bad option $1, see './configure -h' for help"
      cleanexit 2
    ;;
  esac
  shift
done

# Ensure that BUILD_DIR exists
test -d $BUILD_DIR || mkdir -p $BUILD_DIR

# If configure called from ./configure.cache, do not overwrite
if [ "$SAVE_CONFIGURE_OPTIONS_IN_CACHE" != "no" ]; then
  (
  cat << END
export SAVE_CONFIGURE_OPTIONS_IN_CACHE="no"
cd $SOURCE_DIR
echo "$SHELL $0 ${COMMANDLINE//\"/\\\"}"
$SHELL $0 $COMMANDLINE
END
  ) > $BUILD_DIR/configure.cache
  chmod a+x $BUILD_DIR/configure.cache
fi

#Check that Qt is correctly installed
if [ "$SKIP_QT_CHECK" = "no" ]; then
  if qmake -v > /dev/null 2>&1; then
    QT_VERSION=$(qmake -v | awk '{if(NR==2) print $4}')
    QT_VERSION_NUM=$(echo $QT_VERSION | awk 'BEGIN{FS="."}{print $1*1000000+$2*1000+$3}')
    if [ "$QT_VERSION_NUM" -lt "5012000" ]; then
      echo "*** ERROR *** : your Qt version is $QT_VERSION."
      echo "                At least version 5.12.0 is recommended."
      echo "                If you want to skip this version check,"
      echo "                add option -skip-qt-check."
      cleanexit 2
    fi
  else
    echo "*** ERROR *** : qmake command is not available."
    echo "                Either Qt is not correctly installed"
    echo "                or PATH does not point to Qt binaries."
    cleanexit 2
  fi
fi
# Show license if Makefile does not exist
if [ ! -e $BUILD_DIR/Makefile ] && [ "$LICENSE_ACCEPTED" = "no" ]; then
  echo
  echo "geopsypack contains items licensed to you under"
  echo "the terms of all these licenses:"
  echo
  for l in $(ls LICENSE.*); do
    echo "   $l"
  done
  echo
  LICENSE_ACCEPT=""
  while [ "$LICENSE_ACCEPT" != "no" ] && [ "$LICENSE_ACCEPT" != "yes" ]; do
    echo "Type 'view' to view all these licenses."
    echo "Type 'yes' to accept these license offers."
    echo "Type 'no' to decline these license offers."
    echo
    echo -n "Do you accept these license? "
    read LICENSE_ACCEPT
    if [ "$LICENSE_ACCEPT" = "view" ]; then
      echo
      echo "###########################################################"
      echo
      echo "Type SPACE BAR or RETURN to move down, 'q' for next license"
      echo
      echo "###########################################################"
      echo
      sleep 5
      for l in $(ls LICENSE.*); do
        less $l
      done
    fi
  done
  if [ "$LICENSE_ACCEPT" = "no" ]; then
    echo "You are not allowed to use this package."
    cleanexit 2
  fi
fi
echo
# Check for Ubuntu Unity
# Comment this section if you are not running Ubuntu Unity with a recent release > 10.04
if which lsb_release > /dev/null 2>&1; then
  if [ $(lsb_release --id | awk 'BEGIN{FS=":"}{gsub("^[ \t]*", "", $2);print tolower($2)}') = "ubuntu" ]; then
    if [ $(lsb_release --release | awk 'BEGIN{FS=":"}{gsub("^[ \t]*", "", $2);print $2*100}') -gt 1004 ]; then
      COMMANDLINE="$COMMANDLINE -D UBUNTU_UNITY"
    fi
  fi
fi

# Create main pro file
(
echo "TEMPLATE=subdirs"
echo "CONFIG += ordered"
echo "SUBDIRS=\\"
) > $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/mseed/src || mkdir -p $BUILD_DIR/mseed/src
cat <<ENDVERSION > $TEMP_DIR/mseedVersion.h
#ifndef MSEED_VERSION
#define MSEED_VERSION "2.5.1"
#define MSEED_VERSION_TIME "201908122143"
#define MSEED_VERSION_TYPE "testing"
#define MSEED_AUTHORS ""
#define MSEED_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define MSEED_GIT_COMMIT "ceefd8f09a8d7141260cf23d8ba19730b2a5d097"
#endif // MSEED_VERSION
ENDVERSION
replaceFile $BUILD_DIR/mseed/src mseedVersion.h
echo "Configure mseed"
cd "mseed"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir mseed -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          mseed \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/slink/src || mkdir -p $BUILD_DIR/slink/src
cat <<ENDVERSION > $TEMP_DIR/slinkVersion.h
#ifndef SLINK_VERSION
#define SLINK_VERSION "1.6.0"
#define SLINK_VERSION_TIME "201908122143"
#define SLINK_VERSION_TYPE "testing"
#define SLINK_AUTHORS ""
#define SLINK_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define SLINK_GIT_COMMIT "5726c58c9a8fac73a989f60f2f8a6fdc43a9421b"
#endif // SLINK_VERSION
ENDVERSION
replaceFile $BUILD_DIR/slink/src slinkVersion.h
echo "Configure slink"
cd "slink"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir slink -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          slink \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpCoreTools/src || mkdir -p $BUILD_DIR/QGpCoreTools/src
cat <<ENDVERSION > $TEMP_DIR/QGpCoreToolsVersion.h
#ifndef QGPCORETOOLS_VERSION
#define QGPCORETOOLS_VERSION "2.2.2"
#define QGPCORETOOLS_VERSION_TIME "201911191229"
#define QGPCORETOOLS_VERSION_TYPE "testing"
#define QGPCORETOOLS_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define QGPCORETOOLS_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPCORETOOLS_GIT_COMMIT "0c724b5ead47c1d34f70d6f74ac38ec5b8fbcf0d"
#endif // QGPCORETOOLS_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpCoreTools/src QGpCoreToolsVersion.h
echo "Configure QGpCoreTools"
cd "QGpCoreTools"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreTools -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpCoreTools \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpGuiTools/src || mkdir -p $BUILD_DIR/QGpGuiTools/src
cat <<ENDVERSION > $TEMP_DIR/QGpGuiToolsVersion.h
#ifndef QGPGUITOOLS_VERSION
#define QGPGUITOOLS_VERSION "2.2.0"
#define QGPGUITOOLS_VERSION_TIME "201910010814"
#define QGPGUITOOLS_VERSION_TYPE "testing"
#define QGPGUITOOLS_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define QGPGUITOOLS_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPGUITOOLS_GIT_COMMIT "33c966f852f5c113e8643d4f050bb6d392ea50b8"
#endif // QGPGUITOOLS_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpGuiTools/src QGpGuiToolsVersion.h
echo "Configure QGpGuiTools"
cd "QGpGuiTools"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpGuiTools -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpGuiTools \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpCoreMath/src || mkdir -p $BUILD_DIR/QGpCoreMath/src
cat <<ENDVERSION > $TEMP_DIR/QGpCoreMathVersion.h
#ifndef QGPCOREMATH_VERSION
#define QGPCOREMATH_VERSION "1.2.1"
#define QGPCOREMATH_VERSION_TIME "201911191229"
#define QGPCOREMATH_VERSION_TYPE "testing"
#define QGPCOREMATH_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define QGPCOREMATH_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPCOREMATH_GIT_COMMIT "49697e7a72b9ab97691ee5c529acbb8d76ff60b1"
#endif // QGPCOREMATH_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpCoreMath/src QGpCoreMathVersion.h
echo "Configure QGpCoreMath"
cd "QGpCoreMath"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreMath -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpCoreMath \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/SciFigs/src || mkdir -p $BUILD_DIR/SciFigs/src
cat <<ENDVERSION > $TEMP_DIR/SciFigsVersion.h
#ifndef SCIFIGS_VERSION
#define SCIFIGS_VERSION "3.1.1"
#define SCIFIGS_VERSION_TIME "201911191229"
#define SCIFIGS_VERSION_TYPE "testing"
#define SCIFIGS_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define SCIFIGS_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define SCIFIGS_GIT_COMMIT "eb94b6697c451a245d2a467ada3004dda5d26827"
#endif // SCIFIGS_VERSION
ENDVERSION
replaceFile $BUILD_DIR/SciFigs/src SciFigsVersion.h
echo "Configure SciFigs"
cd "SciFigs"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir SciFigs -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          SciFigs \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpGuiMath/src || mkdir -p $BUILD_DIR/QGpGuiMath/src
cat <<ENDVERSION > $TEMP_DIR/QGpGuiMathVersion.h
#ifndef QGPGUIMATH_VERSION
#define QGPGUIMATH_VERSION "1.1.2"
#define QGPGUIMATH_VERSION_TIME "201911191229"
#define QGPGUIMATH_VERSION_TYPE "testing"
#define QGPGUIMATH_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define QGPGUIMATH_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPGUIMATH_GIT_COMMIT "565aabd8af5c43810a9bdf2b95613639c5905278"
#endif // QGPGUIMATH_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpGuiMath/src QGpGuiMathVersion.h
echo "Configure QGpGuiMath"
cd "QGpGuiMath"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpGuiMath -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpGuiMath \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/figue/src || mkdir -p $BUILD_DIR/figue/src
cat <<ENDVERSION > $TEMP_DIR/figueVersion.h
#ifndef FIGUE_VERSION
#define FIGUE_VERSION "2.0.2"
#define FIGUE_VERSION_TIME "201911191229"
#define FIGUE_VERSION_TYPE "testing"
#define FIGUE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define FIGUE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define FIGUE_GIT_COMMIT "777b80b939ce349f8b3fdc96d5d8eb42f2878c35"
#endif // FIGUE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/figue/src figueVersion.h
echo "Configure figue"
cd "figue"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir figue -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          figue \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpCoreWave/src || mkdir -p $BUILD_DIR/QGpCoreWave/src
cat <<ENDVERSION > $TEMP_DIR/QGpCoreWaveVersion.h
#ifndef QGPCOREWAVE_VERSION
#define QGPCOREWAVE_VERSION "2.0.2"
#define QGPCOREWAVE_VERSION_TIME "201910010814"
#define QGPCOREWAVE_VERSION_TYPE "testing"
#define QGPCOREWAVE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)\nPhil Cummins (RSES, Canberra, Australia)\nRoger Wisen (RAMBOLL, Copenhagen, Denmark)"
#define QGPCOREWAVE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPCOREWAVE_GIT_COMMIT "7a233bbf22aa5173d07d09bb0390f7b2584de80c"
#endif // QGPCOREWAVE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpCoreWave/src QGpCoreWaveVersion.h
echo "Configure QGpCoreWave"
cd "QGpCoreWave"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreWave -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpCoreWave \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpGuiWave/src || mkdir -p $BUILD_DIR/QGpGuiWave/src
cat <<ENDVERSION > $TEMP_DIR/QGpGuiWaveVersion.h
#ifndef QGPGUIWAVE_VERSION
#define QGPGUIWAVE_VERSION "1.0.0"
#define QGPGUIWAVE_VERSION_TIME "201908261420"
#define QGPGUIWAVE_VERSION_TYPE "testing"
#define QGPGUIWAVE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define QGPGUIWAVE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPGUIWAVE_GIT_COMMIT "0faadb6b5624233d114cea54ad8ff70b2c191dbc"
#endif // QGPGUIWAVE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpGuiWave/src QGpGuiWaveVersion.h
echo "Configure QGpGuiWave"
cd "QGpGuiWave"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpGuiWave -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpGuiWave \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpCompatibility/src || mkdir -p $BUILD_DIR/QGpCompatibility/src
cat <<ENDVERSION > $TEMP_DIR/QGpCompatibilityVersion.h
#ifndef QGPCOMPATIBILITY_VERSION
#define QGPCOMPATIBILITY_VERSION "1.0.1"
#define QGPCOMPATIBILITY_VERSION_TIME "201910010814"
#define QGPCOMPATIBILITY_VERSION_TYPE "testing"
#define QGPCOMPATIBILITY_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define QGPCOMPATIBILITY_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPCOMPATIBILITY_GIT_COMMIT "f9d446f2f44ccf01c84e2cb8cc837bcc495d405c"
#endif // QGPCOMPATIBILITY_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpCompatibility/src QGpCompatibilityVersion.h
echo "Configure QGpCompatibility"
cd "QGpCompatibility"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCompatibility -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpCompatibility \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/GeopsyCore/src || mkdir -p $BUILD_DIR/GeopsyCore/src
cat <<ENDVERSION > $TEMP_DIR/GeopsyCoreVersion.h
#ifndef GEOPSYCORE_VERSION
#define GEOPSYCORE_VERSION "4.2.1"
#define GEOPSYCORE_VERSION_TIME "201911191229"
#define GEOPSYCORE_VERSION_TYPE "testing"
#define GEOPSYCORE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYCORE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYCORE_GIT_COMMIT "16466c435f1d9e57bd5f0e3c3339fa337e0e5109"
#endif // GEOPSYCORE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/GeopsyCore/src GeopsyCoreVersion.h
echo "Configure GeopsyCore"
cd "GeopsyCore"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsyCore -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          GeopsyCore \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/GeopsyGui/src || mkdir -p $BUILD_DIR/GeopsyGui/src
cat <<ENDVERSION > $TEMP_DIR/GeopsyGuiVersion.h
#ifndef GEOPSYGUI_VERSION
#define GEOPSYGUI_VERSION "3.2.1"
#define GEOPSYGUI_VERSION_TIME "201911191229"
#define GEOPSYGUI_VERSION_TYPE "testing"
#define GEOPSYGUI_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYGUI_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYGUI_GIT_COMMIT "c3ee93caecf94dab3e791cf3c3f5dfb93ff3ece7"
#endif // GEOPSYGUI_VERSION
ENDVERSION
replaceFile $BUILD_DIR/GeopsyGui/src GeopsyGuiVersion.h
echo "Configure GeopsyGui"
cd "GeopsyGui"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsyGui -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          GeopsyGui \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsyfigs/src || mkdir -p $BUILD_DIR/geopsyfigs/src
cat <<ENDVERSION > $TEMP_DIR/geopsyfigsVersion.h
#ifndef GEOPSYFIGS_VERSION
#define GEOPSYFIGS_VERSION "1.0.0"
#define GEOPSYFIGS_VERSION_TIME "201908261420"
#define GEOPSYFIGS_VERSION_TYPE "testing"
#define GEOPSYFIGS_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GEOPSYFIGS_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYFIGS_GIT_COMMIT "b3468c6b2e035b68d400c33fbcb444a786d9d979"
#endif // GEOPSYFIGS_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsyfigs/src geopsyfigsVersion.h
echo "Configure geopsyfigs"
cd "geopsyfigs"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyfigs -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsyfigs \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/GeopsySLink/src || mkdir -p $BUILD_DIR/GeopsySLink/src
cat <<ENDVERSION > $TEMP_DIR/GeopsySLinkVersion.h
#ifndef GEOPSYSLINK_VERSION
#define GEOPSYSLINK_VERSION "2.0.1"
#define GEOPSYSLINK_VERSION_TIME "201910010814"
#define GEOPSYSLINK_VERSION_TYPE "testing"
#define GEOPSYSLINK_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GEOPSYSLINK_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYSLINK_GIT_COMMIT "727dc81f806eebfed08be619beb8dac511e1e127"
#endif // GEOPSYSLINK_VERSION
ENDVERSION
replaceFile $BUILD_DIR/GeopsySLink/src GeopsySLinkVersion.h
echo "Configure GeopsySLink"
cd "GeopsySLink"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsySLink -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          GeopsySLink \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/GeopsySLinkGui/src || mkdir -p $BUILD_DIR/GeopsySLinkGui/src
cat <<ENDVERSION > $TEMP_DIR/GeopsySLinkGuiVersion.h
#ifndef GEOPSYSLINKGUI_VERSION
#define GEOPSYSLINKGUI_VERSION "2.0.1"
#define GEOPSYSLINKGUI_VERSION_TIME "201911191229"
#define GEOPSYSLINKGUI_VERSION_TYPE "testing"
#define GEOPSYSLINKGUI_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GEOPSYSLINKGUI_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYSLINKGUI_GIT_COMMIT "994609ab8111750e1cf4374f6f590f28572671a3"
#endif // GEOPSYSLINKGUI_VERSION
ENDVERSION
replaceFile $BUILD_DIR/GeopsySLinkGui/src GeopsySLinkGuiVersion.h
echo "Configure GeopsySLinkGui"
cd "GeopsySLinkGui"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsySLinkGui -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          GeopsySLinkGui \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/DinverCore/src || mkdir -p $BUILD_DIR/DinverCore/src
cat <<ENDVERSION > $TEMP_DIR/DinverCoreVersion.h
#ifndef DINVERCORE_VERSION
#define DINVERCORE_VERSION "1.1.0"
#define DINVERCORE_VERSION_TIME "201910010814"
#define DINVERCORE_VERSION_TYPE "testing"
#define DINVERCORE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define DINVERCORE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVERCORE_GIT_COMMIT "dad17d05b3b8881869a7bc62d690980c92a9f08c"
#endif // DINVERCORE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/DinverCore/src DinverCoreVersion.h
echo "Configure DinverCore"
cd "DinverCore"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverCore -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          DinverCore \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/DinverGui/src || mkdir -p $BUILD_DIR/DinverGui/src
cat <<ENDVERSION > $TEMP_DIR/DinverGuiVersion.h
#ifndef DINVERGUI_VERSION
#define DINVERGUI_VERSION "1.0.0"
#define DINVERGUI_VERSION_TIME "201908261420"
#define DINVERGUI_VERSION_TYPE "testing"
#define DINVERGUI_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define DINVERGUI_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVERGUI_GIT_COMMIT "e377fa589a1a1a753c51e8fc3a0350ab11e40c7d"
#endif // DINVERGUI_VERSION
ENDVERSION
replaceFile $BUILD_DIR/DinverGui/src DinverGuiVersion.h
echo "Configure DinverGui"
cd "DinverGui"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverGui -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          DinverGui \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/DinverDCCore/src || mkdir -p $BUILD_DIR/DinverDCCore/src
cat <<ENDVERSION > $TEMP_DIR/DinverDCCoreVersion.h
#ifndef DINVERDCCORE_VERSION
#define DINVERDCCORE_VERSION "2.0.2"
#define DINVERDCCORE_VERSION_TIME "201910010814"
#define DINVERDCCORE_VERSION_TYPE "testing"
#define DINVERDCCORE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define DINVERDCCORE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVERDCCORE_GIT_COMMIT "7f843c56cbb449efc52e100051301078c4544b8b"
#endif // DINVERDCCORE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/DinverDCCore/src DinverDCCoreVersion.h
echo "Configure DinverDCCore"
cd "DinverDCCore"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverDCCore -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          DinverDCCore \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/DinverDCGui/src || mkdir -p $BUILD_DIR/DinverDCGui/src
cat <<ENDVERSION > $TEMP_DIR/DinverDCGuiVersion.h
#ifndef DINVERDCGUI_VERSION
#define DINVERDCGUI_VERSION "1.0.0"
#define DINVERDCGUI_VERSION_TIME "201908261420"
#define DINVERDCGUI_VERSION_TYPE "testing"
#define DINVERDCGUI_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define DINVERDCGUI_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVERDCGUI_GIT_COMMIT "64951844c9f2da1ca7e3151419c861e4c81f03c2"
#endif // DINVERDCGUI_VERSION
ENDVERSION
replaceFile $BUILD_DIR/DinverDCGui/src DinverDCGuiVersion.h
echo "Configure DinverDCGui"
cd "DinverDCGui"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverDCGui -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          DinverDCGui \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/QGpCoreStat/src || mkdir -p $BUILD_DIR/QGpCoreStat/src
cat <<ENDVERSION > $TEMP_DIR/QGpCoreStatVersion.h
#ifndef QGPCORESTAT_VERSION
#define QGPCORESTAT_VERSION "1.0.1"
#define QGPCORESTAT_VERSION_TIME "201909191926"
#define QGPCORESTAT_VERSION_TYPE "testing"
#define QGPCORESTAT_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define QGPCORESTAT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define QGPCORESTAT_GIT_COMMIT "e663afcbe9a574ddbffbf15fda73ba589678180f"
#endif // QGPCORESTAT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/QGpCoreStat/src QGpCoreStatVersion.h
echo "Configure QGpCoreStat"
cd "QGpCoreStat"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreStat -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          QGpCoreStat \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/HVCore/src || mkdir -p $BUILD_DIR/HVCore/src
cat <<ENDVERSION > $TEMP_DIR/HVCoreVersion.h
#ifndef HVCORE_VERSION
#define HVCORE_VERSION "0.1.0"
#define HVCORE_VERSION_TIME "202002171443"
#define HVCORE_VERSION_TYPE "testing"
#define HVCORE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define HVCORE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define HVCORE_GIT_COMMIT "d617383079971bb1967b391d6200466c7863fb08"
#endif // HVCORE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/HVCore/src HVCoreVersion.h
echo "Configure HVCore"
cd "HVCore"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir HVCore -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          HVCore \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/ArrayCore/src || mkdir -p $BUILD_DIR/ArrayCore/src
cat <<ENDVERSION > $TEMP_DIR/ArrayCoreVersion.h
#ifndef ARRAYCORE_VERSION
#define ARRAYCORE_VERSION "3.2.0"
#define ARRAYCORE_VERSION_TIME "201910010814"
#define ARRAYCORE_VERSION_TYPE "testing"
#define ARRAYCORE_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define ARRAYCORE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define ARRAYCORE_GIT_COMMIT "854181dcfee075ac01bc8f38496492d4be3a5bb9"
#endif // ARRAYCORE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/ArrayCore/src ArrayCoreVersion.h
echo "Configure ArrayCore"
cd "ArrayCore"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir ArrayCore -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          ArrayCore \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/ArrayGui/src || mkdir -p $BUILD_DIR/ArrayGui/src
cat <<ENDVERSION > $TEMP_DIR/ArrayGuiVersion.h
#ifndef ARRAYGUI_VERSION
#define ARRAYGUI_VERSION "1.1.0"
#define ARRAYGUI_VERSION_TIME "201909230925"
#define ARRAYGUI_VERSION_TYPE "testing"
#define ARRAYGUI_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define ARRAYGUI_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define ARRAYGUI_GIT_COMMIT "578e1bc2358122b7022e332a7b6b9e09144b9174"
#endif // ARRAYGUI_VERSION
ENDVERSION
replaceFile $BUILD_DIR/ArrayGui/src ArrayGuiVersion.h
echo "Configure ArrayGui"
cd "ArrayGui"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir ArrayGui -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          ArrayGui \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsy-fk/src || mkdir -p $BUILD_DIR/geopsy-fk/src
cat <<ENDVERSION > $TEMP_DIR/geopsy-fkVersion.h
#ifndef GEOPSY_FK_VERSION
#define GEOPSY_FK_VERSION "1.0.0"
#define GEOPSY_FK_VERSION_TIME "201908261420"
#define GEOPSY_FK_VERSION_TYPE "testing"
#define GEOPSY_FK_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)"
#define GEOPSY_FK_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSY_FK_GIT_COMMIT "cea681dc86f90a7dd4e61d8b927d89c0278f74d2"
#endif // GEOPSY_FK_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsy-fk/src geopsy-fkVersion.h
echo "Configure geopsy-fk"
cd "geopsy-fk"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy-fk -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsy-fk \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsy-spac/src || mkdir -p $BUILD_DIR/geopsy-spac/src
cat <<ENDVERSION > $TEMP_DIR/geopsy-spacVersion.h
#ifndef GEOPSY_SPAC_VERSION
#define GEOPSY_SPAC_VERSION "1.0.0"
#define GEOPSY_SPAC_VERSION_TIME "201908261420"
#define GEOPSY_SPAC_VERSION_TYPE "testing"
#define GEOPSY_SPAC_AUTHORS ""
#define GEOPSY_SPAC_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSY_SPAC_GIT_COMMIT "bc17ba55e0bed13352c72079161660d66d543a14"
#endif // GEOPSY_SPAC_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsy-spac/src geopsy-spacVersion.h
echo "Configure geopsy-spac"
cd "geopsy-spac"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy-spac -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsy-spac \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsy-hv/src || mkdir -p $BUILD_DIR/geopsy-hv/src
cat <<ENDVERSION > $TEMP_DIR/geopsy-hvVersion.h
#ifndef GEOPSY_HV_VERSION
#define GEOPSY_HV_VERSION "0.1.0"
#define GEOPSY_HV_VERSION_TIME ""
#define GEOPSY_HV_VERSION_TYPE "testing"
#define GEOPSY_HV_AUTHORS ""
#define GEOPSY_HV_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSY_HV_GIT_COMMIT "a059008cb99d723d8c0f539bf8d9bab953b2bdb4"
#endif // GEOPSY_HV_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsy-hv/src geopsy-hvVersion.h
echo "Configure geopsy-hv"
cd "geopsy-hv"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy-hv -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsy-hv \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsy/src || mkdir -p $BUILD_DIR/geopsy/src
cat <<ENDVERSION > $TEMP_DIR/geopsyVersion.h
#ifndef GEOPSY_VERSION
#define GEOPSY_VERSION "3.2.0"
#define GEOPSY_VERSION_TIME "201911191229"
#define GEOPSY_VERSION_TYPE "testing"
#define GEOPSY_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSY_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSY_GIT_COMMIT "46ecc9b32fe47a4f7d55d8d5cabe8949fa1ab1f0"
#endif // GEOPSY_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsy/src geopsyVersion.h
echo "Configure geopsy"
cd "geopsy"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsy \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/vslarray/src || mkdir -p $BUILD_DIR/vslarray/src
cat <<ENDVERSION > $TEMP_DIR/vslarrayVersion.h
#ifndef VSLARRAY_VERSION
#define VSLARRAY_VERSION "1.0.0"
#define VSLARRAY_VERSION_TIME "201908261420"
#define VSLARRAY_VERSION_TYPE "testing"
#define VSLARRAY_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define VSLARRAY_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define VSLARRAY_GIT_COMMIT "09dab9863ffe2bca54ae413addcfa5cecfdbbab7"
#endif // VSLARRAY_VERSION
ENDVERSION
replaceFile $BUILD_DIR/vslarray/src vslarrayVersion.h
echo "Configure vslarray"
cd "vslarray"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir vslarray -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          vslarray \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/dinver/src || mkdir -p $BUILD_DIR/dinver/src
cat <<ENDVERSION > $TEMP_DIR/dinverVersion.h
#ifndef DINVER_VERSION
#define DINVER_VERSION "1.0.2"
#define DINVER_VERSION_TIME "201910010814"
#define DINVER_VERSION_TYPE "testing"
#define DINVER_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define DINVER_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVER_GIT_COMMIT "b54d984d9c6e167b7530760161e82033a68c4dcb"
#endif // DINVER_VERSION
ENDVERSION
replaceFile $BUILD_DIR/dinver/src dinverVersion.h
echo "Configure dinver"
cd "dinver"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinver -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          dinver \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/WaranCore/src || mkdir -p $BUILD_DIR/WaranCore/src
cat <<ENDVERSION > $TEMP_DIR/WaranCoreVersion.h
#ifndef WARANCORE_VERSION
#define WARANCORE_VERSION "1.0.0"
#define WARANCORE_VERSION_TIME "201908261420"
#define WARANCORE_VERSION_TYPE "testing"
#define WARANCORE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define WARANCORE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define WARANCORE_GIT_COMMIT "741b3c50dd4c2c2fb870993f50d6b59f4a5b3635"
#endif // WARANCORE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/WaranCore/src WaranCoreVersion.h
echo "Configure WaranCore"
cd "WaranCore"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir WaranCore -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          WaranCore \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/TapePositioningSystem/src || mkdir -p $BUILD_DIR/TapePositioningSystem/src
cat <<ENDVERSION > $TEMP_DIR/TapePositioningSystemVersion.h
#ifndef TAPEPOSITIONINGSYSTEM_VERSION
#define TAPEPOSITIONINGSYSTEM_VERSION "1.0.0"
#define TAPEPOSITIONINGSYSTEM_VERSION_TIME "201908261420"
#define TAPEPOSITIONINGSYSTEM_VERSION_TYPE "testing"
#define TAPEPOSITIONINGSYSTEM_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)"
#define TAPEPOSITIONINGSYSTEM_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define TAPEPOSITIONINGSYSTEM_GIT_COMMIT "55b5dbd684e2d642e2f01f1e70f1c0eba88c5527"
#endif // TAPEPOSITIONINGSYSTEM_VERSION
ENDVERSION
replaceFile $BUILD_DIR/TapePositioningSystem/src TapePositioningSystemVersion.h
echo "Configure TapePositioningSystem"
cd "TapePositioningSystem"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir TapePositioningSystem -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          TapePositioningSystem \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/waran/src || mkdir -p $BUILD_DIR/waran/src
cat <<ENDVERSION > $TEMP_DIR/waranVersion.h
#ifndef WARAN_VERSION
#define WARAN_VERSION "1.1.0"
#define WARAN_VERSION_TIME "201909191926"
#define WARAN_VERSION_TYPE "testing"
#define WARAN_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define WARAN_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define WARAN_GIT_COMMIT "bc3c00ffc0ef6d0521905732a84cfa6bbc79d84a"
#endif // WARAN_VERSION
ENDVERSION
replaceFile $BUILD_DIR/waran/src waranVersion.h
echo "Configure waran"
cd "waran"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir waran -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          waran \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/warangps/src || mkdir -p $BUILD_DIR/warangps/src
cat <<ENDVERSION > $TEMP_DIR/warangpsVersion.h
#ifndef WARANGPS_VERSION
#define WARANGPS_VERSION "1.1.0"
#define WARANGPS_VERSION_TIME "201909230925"
#define WARANGPS_VERSION_TYPE "testing"
#define WARANGPS_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define WARANGPS_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define WARANGPS_GIT_COMMIT "0fa9d4ec8047e35e0d47d1963e294ddfda83feea"
#endif // WARANGPS_VERSION
ENDVERSION
replaceFile $BUILD_DIR/warangps/src warangpsVersion.h
echo "Configure warangps"
cd "warangps"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir warangps -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          warangps \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsyarray/src || mkdir -p $BUILD_DIR/geopsyarray/src
cat <<ENDVERSION > $TEMP_DIR/geopsyarrayVersion.h
#ifndef GEOPSYARRAY_VERSION
#define GEOPSYARRAY_VERSION "3.1.2"
#define GEOPSYARRAY_VERSION_TIME "201911191229"
#define GEOPSYARRAY_VERSION_TYPE "testing"
#define GEOPSYARRAY_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYARRAY_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYARRAY_GIT_COMMIT "0e9a1d45cd459eaa23b3d7dfb10b2081421755b8"
#endif // GEOPSYARRAY_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsyarray/src geopsyarrayVersion.h
echo "Configure geopsyarray"
cd "geopsyarray"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyarray -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsyarray \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsyhv/src || mkdir -p $BUILD_DIR/geopsyhv/src
cat <<ENDVERSION > $TEMP_DIR/geopsyhvVersion.h
#ifndef GEOPSYHV_VERSION
#define GEOPSYHV_VERSION "3.0.2"
#define GEOPSYHV_VERSION_TIME "201911191229"
#define GEOPSYHV_VERSION_TYPE "testing"
#define GEOPSYHV_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYHV_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYHV_GIT_COMMIT "209b3aa6b033f9ec27f6ac90ffe01abbeefaf28c"
#endif // GEOPSYHV_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsyhv/src geopsyhvVersion.h
echo "Configure geopsyhv"
cd "geopsyhv"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyhv -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsyhv \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsydamping/src || mkdir -p $BUILD_DIR/geopsydamping/src
cat <<ENDVERSION > $TEMP_DIR/geopsydampingVersion.h
#ifndef GEOPSYDAMPING_VERSION
#define GEOPSYDAMPING_VERSION "2.0.0"
#define GEOPSYDAMPING_VERSION_TIME "201908261420"
#define GEOPSYDAMPING_VERSION_TYPE "testing"
#define GEOPSYDAMPING_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYDAMPING_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYDAMPING_GIT_COMMIT "33d3754c0890afae31563d4f9120d181a3b04e5b"
#endif // GEOPSYDAMPING_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsydamping/src geopsydampingVersion.h
echo "Configure geopsydamping"
cd "geopsydamping"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsydamping -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsydamping \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsytfa/src || mkdir -p $BUILD_DIR/geopsytfa/src
cat <<ENDVERSION > $TEMP_DIR/geopsytfaVersion.h
#ifndef GEOPSYTFA_VERSION
#define GEOPSYTFA_VERSION "2.0.0"
#define GEOPSYTFA_VERSION_TIME "201908261420"
#define GEOPSYTFA_VERSION_TYPE "testing"
#define GEOPSYTFA_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GEOPSYTFA_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYTFA_GIT_COMMIT "8ace0e5743ee0513c6a66120378f0327fe148de1"
#endif // GEOPSYTFA_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsytfa/src geopsytfaVersion.h
echo "Configure geopsytfa"
cd "geopsytfa"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsytfa -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsytfa \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsynr/src || mkdir -p $BUILD_DIR/geopsynr/src
cat <<ENDVERSION > $TEMP_DIR/geopsynrVersion.h
#ifndef GEOPSYNR_VERSION
#define GEOPSYNR_VERSION "1.0.0"
#define GEOPSYNR_VERSION_TIME "201908261420"
#define GEOPSYNR_VERSION_TYPE "testing"
#define GEOPSYNR_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GEOPSYNR_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYNR_GIT_COMMIT "a083e913b6df95d4cca9ae08f0567b79283267e2"
#endif // GEOPSYNR_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsynr/src geopsynrVersion.h
echo "Configure geopsynr"
cd "geopsynr"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsynr -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsynr \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsyptmotion/src || mkdir -p $BUILD_DIR/geopsyptmotion/src
cat <<ENDVERSION > $TEMP_DIR/geopsyptmotionVersion.h
#ifndef GEOPSYPTMOTION_VERSION
#define GEOPSYPTMOTION_VERSION "2.0.0"
#define GEOPSYPTMOTION_VERSION_TIME "201908261420"
#define GEOPSYPTMOTION_VERSION_TYPE "testing"
#define GEOPSYPTMOTION_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYPTMOTION_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYPTMOTION_GIT_COMMIT "a3b7852beb6cf9ba1026742c024e1ea1292c8c62"
#endif // GEOPSYPTMOTION_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsyptmotion/src geopsyptmotionVersion.h
echo "Configure geopsyptmotion"
cd "geopsyptmotion"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyptmotion -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsyptmotion \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/geopsyrefra/src || mkdir -p $BUILD_DIR/geopsyrefra/src
cat <<ENDVERSION > $TEMP_DIR/geopsyrefraVersion.h
#ifndef GEOPSYREFRA_VERSION
#define GEOPSYREFRA_VERSION "2.0.0"
#define GEOPSYREFRA_VERSION_TIME "201908261420"
#define GEOPSYREFRA_VERSION_TYPE "testing"
#define GEOPSYREFRA_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define GEOPSYREFRA_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GEOPSYREFRA_GIT_COMMIT "5fdd37969a0f426a71db1194fa7a0da6f3ac4dbb"
#endif // GEOPSYREFRA_VERSION
ENDVERSION
replaceFile $BUILD_DIR/geopsyrefra/src geopsyrefraVersion.h
echo "Configure geopsyrefra"
cd "geopsyrefra"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyrefra -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          geopsyrefra \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/hvtfa/src || mkdir -p $BUILD_DIR/hvtfa/src
cat <<ENDVERSION > $TEMP_DIR/hvtfaVersion.h
#ifndef HVTFA_VERSION
#define HVTFA_VERSION "2.0.0"
#define HVTFA_VERSION_TIME "201908261420"
#define HVTFA_VERSION_TYPE "testing"
#define HVTFA_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)\nMiriam Kristekova (Geophysical Institute, Academy of Sciences, Bratislava, Slovak Republic)"
#define HVTFA_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define HVTFA_GIT_COMMIT "584fe9c218a10cfffb0b4fd2d2ea8f9ab84e67fc"
#endif // HVTFA_VERSION
ENDVERSION
replaceFile $BUILD_DIR/hvtfa/src hvtfaVersion.h
echo "Configure hvtfa"
cd "hvtfa"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir hvtfa -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          hvtfa \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/campbelltob3/src || mkdir -p $BUILD_DIR/campbelltob3/src
cat <<ENDVERSION > $TEMP_DIR/campbelltob3Version.h
#ifndef CAMPBELLTOB3_VERSION
#define CAMPBELLTOB3_VERSION "1.0.0"
#define CAMPBELLTOB3_VERSION_TIME "201908261420"
#define CAMPBELLTOB3_VERSION_TYPE "testing"
#define CAMPBELLTOB3_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)"
#define CAMPBELLTOB3_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define CAMPBELLTOB3_GIT_COMMIT "1c35da7292978d698391997b53501458892ec038"
#endif // CAMPBELLTOB3_VERSION
ENDVERSION
replaceFile $BUILD_DIR/campbelltob3/src campbelltob3Version.h
echo "Configure campbelltob3"
cd "campbelltob3"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir campbelltob3 -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          campbelltob3 \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/dinverdc/src || mkdir -p $BUILD_DIR/dinverdc/src
cat <<ENDVERSION > $TEMP_DIR/dinverdcVersion.h
#ifndef DINVERDC_VERSION
#define DINVERDC_VERSION "2.0.0"
#define DINVERDC_VERSION_TIME "201908261420"
#define DINVERDC_VERSION_TYPE "testing"
#define DINVERDC_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define DINVERDC_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVERDC_GIT_COMMIT "efbca922779388665ead2614962a9ef65c5c31cd"
#endif // DINVERDC_VERSION
ENDVERSION
replaceFile $BUILD_DIR/dinverdc/src dinverdcVersion.h
echo "Configure dinverdc"
cd "dinverdc"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinverdc -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          dinverdc \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/dinverext/src || mkdir -p $BUILD_DIR/dinverext/src
cat <<ENDVERSION > $TEMP_DIR/dinverextVersion.h
#ifndef DINVEREXT_VERSION
#define DINVEREXT_VERSION "1.0.2"
#define DINVEREXT_VERSION_TIME "201910010814"
#define DINVEREXT_VERSION_TYPE "testing"
#define DINVEREXT_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define DINVEREXT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVEREXT_GIT_COMMIT "4a5128ae3b0d16b12250b92fc79dc45d851c8cef"
#endif // DINVEREXT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/dinverext/src dinverextVersion.h
echo "Configure dinverext"
cd "dinverext"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinverext -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          dinverext \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/spac2disp/src || mkdir -p $BUILD_DIR/spac2disp/src
cat <<ENDVERSION > $TEMP_DIR/spac2dispVersion.h
#ifndef SPAC2DISP_VERSION
#define SPAC2DISP_VERSION "1.0.0"
#define SPAC2DISP_VERSION_TIME "201908261420"
#define SPAC2DISP_VERSION_TYPE "testing"
#define SPAC2DISP_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)\nMarc Wathelet (ULg, Liège, Belgium)"
#define SPAC2DISP_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define SPAC2DISP_GIT_COMMIT "b3547337ccc5a5b6b69e765b590cc8d8b2e45e7b"
#endif // SPAC2DISP_VERSION
ENDVERSION
replaceFile $BUILD_DIR/spac2disp/src spac2dispVersion.h
echo "Configure spac2disp"
cd "spac2disp"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir spac2disp -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          spac2disp \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/max2curve/src || mkdir -p $BUILD_DIR/max2curve/src
cat <<ENDVERSION > $TEMP_DIR/max2curveVersion.h
#ifndef MAX2CURVE_VERSION
#define MAX2CURVE_VERSION "1.1.0"
#define MAX2CURVE_VERSION_TIME "201909230925"
#define MAX2CURVE_VERSION_TYPE "testing"
#define MAX2CURVE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define MAX2CURVE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define MAX2CURVE_GIT_COMMIT "e6ebbd333eb122413531678c7bc89a90dfc25e93"
#endif // MAX2CURVE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/max2curve/src max2curveVersion.h
echo "Configure max2curve"
cd "max2curve"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir max2curve -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          max2curve \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gppoisson/src || mkdir -p $BUILD_DIR/gppoisson/src
cat <<ENDVERSION > $TEMP_DIR/gppoissonVersion.h
#ifndef GPPOISSON_VERSION
#define GPPOISSON_VERSION "2.0.0"
#define GPPOISSON_VERSION_TIME "201908261420"
#define GPPOISSON_VERSION_TYPE "testing"
#define GPPOISSON_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPPOISSON_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPPOISSON_GIT_COMMIT "a055c870d2dd7453561d6a9708a5849a16b614f9"
#endif // GPPOISSON_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gppoisson/src gppoissonVersion.h
echo "Configure gppoisson"
cd "gppoisson"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gppoisson -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gppoisson \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpprofile/src || mkdir -p $BUILD_DIR/gpprofile/src
cat <<ENDVERSION > $TEMP_DIR/gpprofileVersion.h
#ifndef GPPROFILE_VERSION
#define GPPROFILE_VERSION "1.1.0"
#define GPPROFILE_VERSION_TIME "201911191229"
#define GPPROFILE_VERSION_TYPE "testing"
#define GPPROFILE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPPROFILE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPPROFILE_GIT_COMMIT "a7bb9a04a1a70682401ffd83c4a3e5d0d645bcdc"
#endif // GPPROFILE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpprofile/src gpprofileVersion.h
echo "Configure gpprofile"
cd "gpprofile"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpprofile -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpprofile \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpdc/src || mkdir -p $BUILD_DIR/gpdc/src
cat <<ENDVERSION > $TEMP_DIR/gpdcVersion.h
#ifndef GPDC_VERSION
#define GPDC_VERSION "1.0.1"
#define GPDC_VERSION_TIME "201911191229"
#define GPDC_VERSION_TYPE "testing"
#define GPDC_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPDC_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPDC_GIT_COMMIT "b5c5a4f7479240ec91096a1a495f3e5f9063a75d"
#endif // GPDC_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpdc/src gpdcVersion.h
echo "Configure gpdc"
cd "gpdc"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdc -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpdc \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gplivemodel/src || mkdir -p $BUILD_DIR/gplivemodel/src
cat <<ENDVERSION > $TEMP_DIR/gplivemodelVersion.h
#ifndef GPLIVEMODEL_VERSION
#define GPLIVEMODEL_VERSION "1.0.1"
#define GPLIVEMODEL_VERSION_TIME "201910010814"
#define GPLIVEMODEL_VERSION_TYPE "testing"
#define GPLIVEMODEL_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPLIVEMODEL_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPLIVEMODEL_GIT_COMMIT "0013ca73418fb5a9446379952b785388d29da1ed"
#endif // GPLIVEMODEL_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gplivemodel/src gplivemodelVersion.h
echo "Configure gplivemodel"
cd "gplivemodel"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gplivemodel -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gplivemodel \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpec8/src || mkdir -p $BUILD_DIR/gpec8/src
cat <<ENDVERSION > $TEMP_DIR/gpec8Version.h
#ifndef GPEC8_VERSION
#define GPEC8_VERSION "1.0.0"
#define GPEC8_VERSION_TIME "201908261420"
#define GPEC8_VERSION_TYPE "testing"
#define GPEC8_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPEC8_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPEC8_GIT_COMMIT "c614412bfd07342d7b776fc3c9ed76880d9868c1"
#endif // GPEC8_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpec8/src gpec8Version.h
echo "Configure gpec8"
cd "gpec8"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpec8 -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpec8 \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpdcreport/src || mkdir -p $BUILD_DIR/gpdcreport/src
cat <<ENDVERSION > $TEMP_DIR/gpdcreportVersion.h
#ifndef GPDCREPORT_VERSION
#define GPDCREPORT_VERSION "1.0.2"
#define GPDCREPORT_VERSION_TIME "201911191229"
#define GPDCREPORT_VERSION_TYPE "testing"
#define GPDCREPORT_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPDCREPORT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPDCREPORT_GIT_COMMIT "d9bbc92ea215e29d995382e3419e5c0125afe150"
#endif // GPDCREPORT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpdcreport/src gpdcreportVersion.h
echo "Configure gpdcreport"
cd "gpdcreport"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdcreport -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpdcreport \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gptarget/src || mkdir -p $BUILD_DIR/gptarget/src
cat <<ENDVERSION > $TEMP_DIR/gptargetVersion.h
#ifndef GPTARGET_VERSION
#define GPTARGET_VERSION "1.0.1"
#define GPTARGET_VERSION_TIME "201909191926"
#define GPTARGET_VERSION_TYPE "testing"
#define GPTARGET_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPTARGET_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPTARGET_GIT_COMMIT "8541512d7eadb0823ae67112057e1edd748f96f8"
#endif // GPTARGET_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gptarget/src gptargetVersion.h
echo "Configure gptarget"
cd "gptarget"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gptarget -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gptarget \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpviewdcreport/src || mkdir -p $BUILD_DIR/gpviewdcreport/src
cat <<ENDVERSION > $TEMP_DIR/gpviewdcreportVersion.h
#ifndef GPVIEWDCREPORT_VERSION
#define GPVIEWDCREPORT_VERSION "1.0.0"
#define GPVIEWDCREPORT_VERSION_TIME "201908261420"
#define GPVIEWDCREPORT_VERSION_TYPE "testing"
#define GPVIEWDCREPORT_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPVIEWDCREPORT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPVIEWDCREPORT_GIT_COMMIT "5dc87df12b8ab9f5f42290035b24b349c98df516"
#endif // GPVIEWDCREPORT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpviewdcreport/src gpviewdcreportVersion.h
echo "Configure gpviewdcreport"
cd "gpviewdcreport"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpviewdcreport -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpviewdcreport \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpdcmisfit/src || mkdir -p $BUILD_DIR/gpdcmisfit/src
cat <<ENDVERSION > $TEMP_DIR/gpdcmisfitVersion.h
#ifndef GPDCMISFIT_VERSION
#define GPDCMISFIT_VERSION "1.0.0"
#define GPDCMISFIT_VERSION_TIME "201908261420"
#define GPDCMISFIT_VERSION_TYPE "testing"
#define GPDCMISFIT_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPDCMISFIT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPDCMISFIT_GIT_COMMIT "b4c939cdec595f2080cc7a0c626c306267ec25bc"
#endif // GPDCMISFIT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpdcmisfit/src gpdcmisfitVersion.h
echo "Configure gpdcmisfit"
cd "gpdcmisfit"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdcmisfit -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpdcmisfit \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpell/src || mkdir -p $BUILD_DIR/gpell/src
cat <<ENDVERSION > $TEMP_DIR/gpellVersion.h
#ifndef GPELL_VERSION
#define GPELL_VERSION "1.0.0"
#define GPELL_VERSION_TIME "201908261420"
#define GPELL_VERSION_TYPE "testing"
#define GPELL_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPELL_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPELL_GIT_COMMIT "0f5ffc5b603d9f71d08a4898824dd0a91ff751ad"
#endif // GPELL_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpell/src gpellVersion.h
echo "Configure gpell"
cd "gpell"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpell -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpell \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpgroup2phase/src || mkdir -p $BUILD_DIR/gpgroup2phase/src
cat <<ENDVERSION > $TEMP_DIR/gpgroup2phaseVersion.h
#ifndef GPGROUP2PHASE_VERSION
#define GPGROUP2PHASE_VERSION "1.0.0"
#define GPGROUP2PHASE_VERSION_TIME "201908261420"
#define GPGROUP2PHASE_VERSION_TYPE "testing"
#define GPGROUP2PHASE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPGROUP2PHASE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPGROUP2PHASE_GIT_COMMIT "50d94a81c3ebe346c4f5aa9633486458163d42fd"
#endif // GPGROUP2PHASE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpgroup2phase/src gpgroup2phaseVersion.h
echo "Configure gpgroup2phase"
cd "gpgroup2phase"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpgroup2phase -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpgroup2phase \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpmodel2param/src || mkdir -p $BUILD_DIR/gpmodel2param/src
cat <<ENDVERSION > $TEMP_DIR/gpmodel2paramVersion.h
#ifndef GPMODEL2PARAM_VERSION
#define GPMODEL2PARAM_VERSION "1.0.0"
#define GPMODEL2PARAM_VERSION_TIME "201908261420"
#define GPMODEL2PARAM_VERSION_TYPE "testing"
#define GPMODEL2PARAM_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPMODEL2PARAM_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPMODEL2PARAM_GIT_COMMIT "b1c6480ba576799de65bd575336b9286133eb612"
#endif // GPMODEL2PARAM_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpmodel2param/src gpmodel2paramVersion.h
echo "Configure gpmodel2param"
cd "gpmodel2param"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpmodel2param -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpmodel2param \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpparam2model/src || mkdir -p $BUILD_DIR/gpparam2model/src
cat <<ENDVERSION > $TEMP_DIR/gpparam2modelVersion.h
#ifndef GPPARAM2MODEL_VERSION
#define GPPARAM2MODEL_VERSION "1.0.0"
#define GPPARAM2MODEL_VERSION_TIME "201908261420"
#define GPPARAM2MODEL_VERSION_TYPE "testing"
#define GPPARAM2MODEL_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPPARAM2MODEL_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPPARAM2MODEL_GIT_COMMIT "a7c9b8b91c19ac32f57fd5c021ca99140fdedaef"
#endif // GPPARAM2MODEL_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpparam2model/src gpparam2modelVersion.h
echo "Configure gpparam2model"
cd "gpparam2model"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpparam2model -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpparam2model \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpdepths/src || mkdir -p $BUILD_DIR/gpdepths/src
cat <<ENDVERSION > $TEMP_DIR/gpdepthsVersion.h
#ifndef GPDEPTHS_VERSION
#define GPDEPTHS_VERSION "1.0.0"
#define GPDEPTHS_VERSION_TIME "201908261420"
#define GPDEPTHS_VERSION_TYPE "testing"
#define GPDEPTHS_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPDEPTHS_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPDEPTHS_GIT_COMMIT "6f65a31c59341e1869fff82f144f69620b2579ad"
#endif // GPDEPTHS_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpdepths/src gpdepthsVersion.h
echo "Configure gpdepths"
cd "gpdepths"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdepths -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpdepths \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpsort/src || mkdir -p $BUILD_DIR/gpsort/src
cat <<ENDVERSION > $TEMP_DIR/gpsortVersion.h
#ifndef GPSORT_VERSION
#define GPSORT_VERSION "1.0.0"
#define GPSORT_VERSION_TIME "201908261420"
#define GPSORT_VERSION_TYPE "testing"
#define GPSORT_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPSORT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPSORT_GIT_COMMIT "a58ab44ef3e104ec0fe2ae5bfb02347ea2dc207f"
#endif // GPSORT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpsort/src gpsortVersion.h
echo "Configure gpsort"
cd "gpsort"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpsort -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpsort \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpcurve/src || mkdir -p $BUILD_DIR/gpcurve/src
cat <<ENDVERSION > $TEMP_DIR/gpcurveVersion.h
#ifndef GPCURVE_VERSION
#define GPCURVE_VERSION "1.0.0"
#define GPCURVE_VERSION_TIME "201908261420"
#define GPCURVE_VERSION_TYPE "testing"
#define GPCURVE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPCURVE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPCURVE_GIT_COMMIT "871ec18ae8af3237d1614b95895e2a260d2fa0fa"
#endif // GPCURVE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpcurve/src gpcurveVersion.h
echo "Configure gpcurve"
cd "gpcurve"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpcurve -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpcurve \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gprandom/src || mkdir -p $BUILD_DIR/gprandom/src
cat <<ENDVERSION > $TEMP_DIR/gprandomVersion.h
#ifndef GPRANDOM_VERSION
#define GPRANDOM_VERSION "1.0.0"
#define GPRANDOM_VERSION_TIME "201908261420"
#define GPRANDOM_VERSION_TYPE "testing"
#define GPRANDOM_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPRANDOM_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPRANDOM_GIT_COMMIT "9b1e124406772d1311592769045d069cf45008a8"
#endif // GPRANDOM_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gprandom/src gprandomVersion.h
echo "Configure gprandom"
cd "gprandom"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gprandom -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gprandom \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpspac/src || mkdir -p $BUILD_DIR/gpspac/src
cat <<ENDVERSION > $TEMP_DIR/gpspacVersion.h
#ifndef GPSPAC_VERSION
#define GPSPAC_VERSION "1.0.0"
#define GPSPAC_VERSION_TIME "201908261420"
#define GPSPAC_VERSION_TYPE "testing"
#define GPSPAC_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPSPAC_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPSPAC_GIT_COMMIT "b840555c01e0274630fda35d73204ddb7ebefb6f"
#endif // GPSPAC_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpspac/src gpspacVersion.h
echo "Configure gpspac"
cd "gpspac"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpspac -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpspac \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gprefra/src || mkdir -p $BUILD_DIR/gprefra/src
cat <<ENDVERSION > $TEMP_DIR/gprefraVersion.h
#ifndef GPREFRA_VERSION
#define GPREFRA_VERSION "1.0.0"
#define GPREFRA_VERSION_TIME "201908261420"
#define GPREFRA_VERSION_TYPE "testing"
#define GPREFRA_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPREFRA_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPREFRA_GIT_COMMIT "d69303657483fad239c9ea2cb5ec9efd93c884da"
#endif // GPREFRA_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gprefra/src gprefraVersion.h
echo "Configure gprefra"
cd "gprefra"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gprefra -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gprefra \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpsignal/src || mkdir -p $BUILD_DIR/gpsignal/src
cat <<ENDVERSION > $TEMP_DIR/gpsignalVersion.h
#ifndef GPSIGNAL_VERSION
#define GPSIGNAL_VERSION "2.0.0"
#define GPSIGNAL_VERSION_TIME "201908261420"
#define GPSIGNAL_VERSION_TYPE "testing"
#define GPSIGNAL_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPSIGNAL_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPSIGNAL_GIT_COMMIT "b1fddc1ace842ce3a5236006691841ce2e55adc0"
#endif // GPSIGNAL_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpsignal/src gpsignalVersion.h
echo "Configure gpsignal"
cd "gpsignal"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpsignal -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpsignal \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gphistogram/src || mkdir -p $BUILD_DIR/gphistogram/src
cat <<ENDVERSION > $TEMP_DIR/gphistogramVersion.h
#ifndef GPHISTOGRAM_VERSION
#define GPHISTOGRAM_VERSION "1.1.0"
#define GPHISTOGRAM_VERSION_TIME "201909230925"
#define GPHISTOGRAM_VERSION_TYPE "testing"
#define GPHISTOGRAM_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPHISTOGRAM_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPHISTOGRAM_GIT_COMMIT "f520175bcb16da698f38ecb6e41d0a392d62042a"
#endif // GPHISTOGRAM_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gphistogram/src gphistogramVersion.h
echo "Configure gphistogram"
cd "gphistogram"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gphistogram -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gphistogram \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpviewmax/src || mkdir -p $BUILD_DIR/gpviewmax/src
cat <<ENDVERSION > $TEMP_DIR/gpviewmaxVersion.h
#ifndef GPVIEWMAX_VERSION
#define GPVIEWMAX_VERSION "1.0.1"
#define GPVIEWMAX_VERSION_TIME "201909191926"
#define GPVIEWMAX_VERSION_TYPE "testing"
#define GPVIEWMAX_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)"
#define GPVIEWMAX_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPVIEWMAX_GIT_COMMIT "9c1631db8fbe9a668c19b2c18e2f6b71b53592ce"
#endif // GPVIEWMAX_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpviewmax/src gpviewmaxVersion.h
echo "Configure gpviewmax"
cd "gpviewmax"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpviewmax -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpviewmax \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpdistance/src || mkdir -p $BUILD_DIR/gpdistance/src
cat <<ENDVERSION > $TEMP_DIR/gpdistanceVersion.h
#ifndef GPDISTANCE_VERSION
#define GPDISTANCE_VERSION "1.0.0"
#define GPDISTANCE_VERSION_TIME "201908261420"
#define GPDISTANCE_VERSION_TYPE "testing"
#define GPDISTANCE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPDISTANCE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPDISTANCE_GIT_COMMIT "72164b44c572753b51764dfa4e2eb449016d2bf7"
#endif // GPDISTANCE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpdistance/src gpdistanceVersion.h
echo "Configure gpdistance"
cd "gpdistance"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdistance -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpdistance \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gptime/src || mkdir -p $BUILD_DIR/gptime/src
cat <<ENDVERSION > $TEMP_DIR/gptimeVersion.h
#ifndef GPTIME_VERSION
#define GPTIME_VERSION "1.0.0"
#define GPTIME_VERSION_TIME "201908261420"
#define GPTIME_VERSION_TYPE "testing"
#define GPTIME_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPTIME_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPTIME_GIT_COMMIT "8a0c031e6d4577ba35797da45a6ee082eb4a520d"
#endif // GPTIME_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gptime/src gptimeVersion.h
echo "Configure gptime"
cd "gptime"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gptime -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gptime \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpcoord/src || mkdir -p $BUILD_DIR/gpcoord/src
cat <<ENDVERSION > $TEMP_DIR/gpcoordVersion.h
#ifndef GPCOORD_VERSION
#define GPCOORD_VERSION "1.0.0"
#define GPCOORD_VERSION_TIME "201908261420"
#define GPCOORD_VERSION_TYPE "testing"
#define GPCOORD_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPCOORD_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPCOORD_GIT_COMMIT "2b43ffbc62fab91ccff451e5f3c8249394752814"
#endif // GPCOORD_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpcoord/src gpcoordVersion.h
echo "Configure gpcoord"
cd "gpcoord"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpcoord -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpcoord \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpreplace/src || mkdir -p $BUILD_DIR/gpreplace/src
cat <<ENDVERSION > $TEMP_DIR/gpreplaceVersion.h
#ifndef GPREPLACE_VERSION
#define GPREPLACE_VERSION "1.0.0"
#define GPREPLACE_VERSION_TIME "201908261420"
#define GPREPLACE_VERSION_TYPE "testing"
#define GPREPLACE_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPREPLACE_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPREPLACE_GIT_COMMIT "1fcdd701d3ec9b563eac1c97121625b139ac05ef"
#endif // GPREPLACE_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpreplace/src gpreplaceVersion.h
echo "Configure gpreplace"
cd "gpreplace"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpreplace -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpreplace \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpsh/src || mkdir -p $BUILD_DIR/gpsh/src
cat <<ENDVERSION > $TEMP_DIR/gpshVersion.h
#ifndef GPSH_VERSION
#define GPSH_VERSION "1.0.0"
#define GPSH_VERSION_TIME "201908261420"
#define GPSH_VERSION_TYPE "testing"
#define GPSH_AUTHORS "Marc Wathelet\nMarc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPSH_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPSH_GIT_COMMIT "aac7bff766e99035f55a8855b52cc76732bab099"
#endif // GPSH_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpsh/src gpshVersion.h
echo "Configure gpsh"
cd "gpsh"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpsh -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpsh \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpmt/src || mkdir -p $BUILD_DIR/gpmt/src
cat <<ENDVERSION > $TEMP_DIR/gpmtVersion.h
#ifndef GPMT_VERSION
#define GPMT_VERSION "1.0.0"
#define GPMT_VERSION_TIME "201908261420"
#define GPMT_VERSION_TYPE "testing"
#define GPMT_AUTHORS "Marc Wathelet (LGIT, Grenoble, France)"
#define GPMT_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPMT_GIT_COMMIT "2572df13d90bbbf2db5aaa6d80747feacd225744"
#endif // GPMT_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpmt/src gpmtVersion.h
echo "Configure gpmt"
cd "gpmt"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpmt -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpmt \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpgridsearch/src || mkdir -p $BUILD_DIR/gpgridsearch/src
cat <<ENDVERSION > $TEMP_DIR/gpgridsearchVersion.h
#ifndef GPGRIDSEARCH_VERSION
#define GPGRIDSEARCH_VERSION "1.0.0"
#define GPGRIDSEARCH_VERSION_TIME "201908261420"
#define GPGRIDSEARCH_VERSION_TYPE "testing"
#define GPGRIDSEARCH_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)"
#define GPGRIDSEARCH_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPGRIDSEARCH_GIT_COMMIT "857f222dfb71b8d0c5f8bdae389a0e2013b3b74b"
#endif // GPGRIDSEARCH_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpgridsearch/src gpgridsearchVersion.h
echo "Configure gpgridsearch"
cd "gpgridsearch"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpgridsearch -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpgridsearch \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpfksimulator/src || mkdir -p $BUILD_DIR/gpfksimulator/src
cat <<ENDVERSION > $TEMP_DIR/gpfksimulatorVersion.h
#ifndef GPFKSIMULATOR_VERSION
#define GPFKSIMULATOR_VERSION "1.0.2"
#define GPFKSIMULATOR_VERSION_TIME "201910010814"
#define GPFKSIMULATOR_VERSION_TYPE "testing"
#define GPFKSIMULATOR_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define GPFKSIMULATOR_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPFKSIMULATOR_GIT_COMMIT "d841ad85650c2b0414d47fa50ca7ca31ee80cd69"
#endif // GPFKSIMULATOR_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpfksimulator/src gpfksimulatorVersion.h
echo "Configure gpfksimulator"
cd "gpfksimulator"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpfksimulator -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpfksimulator \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/gpmaplayer/src || mkdir -p $BUILD_DIR/gpmaplayer/src
cat <<ENDVERSION > $TEMP_DIR/gpmaplayerVersion.h
#ifndef GPMAPLAYER_VERSION
#define GPMAPLAYER_VERSION "1.0.0"
#define GPMAPLAYER_VERSION_TIME "201908261420"
#define GPMAPLAYER_VERSION_TYPE "testing"
#define GPMAPLAYER_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)"
#define GPMAPLAYER_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define GPMAPLAYER_GIT_COMMIT "1c7800ec928a6906dfff9355902e8496bff1687f"
#endif // GPMAPLAYER_VERSION
ENDVERSION
replaceFile $BUILD_DIR/gpmaplayer/src gpmaplayerVersion.h
echo "Configure gpmaplayer"
cd "gpmaplayer"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpmaplayer -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          gpmaplayer \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/dinvermatlab/src || mkdir -p $BUILD_DIR/dinvermatlab/src
cat <<ENDVERSION > $TEMP_DIR/dinvermatlabVersion.h
#ifndef DINVERMATLAB_VERSION
#define DINVERMATLAB_VERSION "1.0.1"
#define DINVERMATLAB_VERSION_TIME "201910010814"
#define DINVERMATLAB_VERSION_TYPE "testing"
#define DINVERMATLAB_AUTHORS "Marc Wathelet\nMarc Wathelet (LGIT, Grenoble, France)"
#define DINVERMATLAB_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define DINVERMATLAB_GIT_COMMIT "e08d324366a8e5cdceb52f6c529c8498f594d20f"
#endif // DINVERMATLAB_VERSION
ENDVERSION
replaceFile $BUILD_DIR/dinvermatlab/src dinvermatlabVersion.h
echo "Configure dinvermatlab"
cd "dinvermatlab"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinvermatlab -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          dinvermatlab \\" >> $BUILD_DIR/geopsypack.pro
test -d $BUILD_DIR/matfiles/src || mkdir -p $BUILD_DIR/matfiles/src
cat <<ENDVERSION > $TEMP_DIR/matfilesVersion.h
#ifndef MATFILES_VERSION
#define MATFILES_VERSION "1.0.1"
#define MATFILES_VERSION_TIME "201910010814"
#define MATFILES_VERSION_TYPE "testing"
#define MATFILES_AUTHORS "Marc Wathelet (ISTerre, Grenoble, France)\nMarc Wathelet (LGIT, Grenoble, France)"
#define MATFILES_DISTRIBUTION "BUILD_DIR must be defined. Invoke commands from build directory"
#define MATFILES_GIT_COMMIT "5d46c65eed223e3c003493670b6f3b2b60f9fa17"
#endif // MATFILES_VERSION
ENDVERSION
replaceFile $BUILD_DIR/matfiles/src matfilesVersion.h
echo "Configure matfiles"
cd "matfiles"
echo "$SHELL configure-testing -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir matfiles -skip-qt-check $COMMANDLINE 2>$TEMP_DIR/log 1>/dev/null" > $TEMP_DIR/configure
if ! $SHELL $TEMP_DIR/configure; then
  cat $TEMP_DIR/log
  cleanexit 2
else
  cat $TEMP_DIR/log
fi
cd ..
# Add project to main pro file
echo "          matfiles \\" >> $BUILD_DIR/geopsypack.pro
# Generate make file
if [ "$BUILD_DIR" = "$SOURCE_DIR" ]; then
  qmake geopsypack.pro
else
  cd $BUILD_DIR
  qmake geopsypack.pro
fi
###############################################################
# Final user message
###############################################################
echo
if [ "$PLATFORM" = "MINGW" ]; then
  CONFIGURE_COMMAND="sh configure"
else
  CONFIGURE_COMMAND="./configure"
fi
echo "  geopsypack is now configured for building."
echo
echo "  To proceed, run (if you have 8 cores)"
echo
if [ "${BUILD_DIR}" != "${SOURCE_DIR}" ]; then
  echo "    $ make -j 8 -C ${BUILD_DIR}"
else
  echo "    $ make -j 8"
fi
echo
echo "  Once everything is built, you must run either"
echo
echo "    $ su -c "make install", if root privileges are needed;"
echo "  or"
echo "    $ make install, if user permissions are sufficient."
echo
echo "  The current configuration options are stored in 'configure.cache'."
echo "  To change the configuration, run '$CONFIGURE_COMMAND [options]'."
echo
cleanexit 0
