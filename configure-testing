#!/bin/bash
# Script generated by dpgitconfigure on Feb  7 2020
#
#   Configure script for Linux, Mac OS X and Unix
#
# copyright (C) 2020 Marc Wathelet. All rights reserved.
#
#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#Platform options
case "$(uname)" in
  Linux) PLATFORM=LINUX ;;
  SunOS) PLATFORM=LINUX ;;
  Darwin) PLATFORM=MAC ;;
  MINGW*) PLATFORM=MINGW ;;
  *)
    echo "Unknown platform $(uname)"
    exit 2
  ;;
esac
# Current shell
if [ "$PLATFORM" = "MINGW" ]; then
  SHELL=sh
else
  SHELL=bash
fi
# Default options
LICENSE_ACCEPTED="no"
SKIP_QT_CHECK="no"
COMMANDLINE=""
SOURCE_DIR=$(cd $(dirname $0) && pwd)
BUILD_DIR=$SOURCE_DIR
while [ "$1" ]; do
  case "$1" in
    "-prefix" | "--prefix" | \
    "-bindir" | "--bindir" | \
    "-libdir" | "--libdir" | \
    "-incdir" | "--incdir" | \
    "-sharedir" | "--sharedir" | \
    "-dest-prefix" | "--dest-prefix" | \
    "-I" | \
    "-L" | \
    "-D" | \
    "-qt-bin-path" | "--qt-bin-path" | \
    "-cflags" | "--cflags" | \
    "-march" | "--march")
      COMMANDLINE="$COMMANDLINE $1"
     shift
      COMMANDLINE="$COMMANDLINE \"$1\""
    ;;
    "-shared" | "--shared" | \
    "-static" | "--static" | \
    "-pch" | "--pch" | \
    "-profile" | "--profile" | \
    "-win32" | "--win32" | \
    "-win64" | "--win64" | \
    "-no-svg" | "--no-svg" | \
    "-sse3" | "--sse3" | \
    "-skip-qt-translations" | "--skip-qt-translations")
      COMMANDLINE="$COMMANDLINE $1"
    ;;
    "-builddir" | "--builddir")
      COMMANDLINE="$COMMANDLINE $1"
      shift
      COMMANDLINE="$COMMANDLINE \"$1\""
      BUILD_DIR=$1
    ;;
    "-rpath" | "--rpath")
      if [ "${2:0:1}" = "-" ]; then
        COMMANDLINE="$COMMANDLINE -rpath"
      else
        shift
        COMMANDLINE="$COMMANDLINE -rpath \"$1\""
      fi
    ;;
    "-accept-license" | "--accept-license")
      LICENSE_ACCEPTED="yes"
      COMMANDLINE="$COMMANDLINE $1"
    ;;
    "-skip-qt-check" | "--skip-qt-check")
      SKIP_QT_CHECK="yes"
      COMMANDLINE="$COMMANDLINE $1"
    ;;
    "-h" | "-help" | "--help")
      echo
      echo "Usage: ./configure [options]"
      echo
      echo "Options:"
      echo
      echo " -qt-bin-path <DIR>  Use Qt in DIR instead of qt in PATH"
      echo " -accept-license     Skip interactive license acceptance"
      echo " -pch                Set precompiled headers on"
      echo
      echo "Installation paths:"
      echo
      echo " -prefix <DIR>       Base directory for installation"
      echo "                       (default /usr/local/Geopsy.org)"
      echo " -bindir <DIR>       Executables will be installed to dir"
      echo "                       (default PREFIX/bin)"
      echo " -libdir <DIR>       Libraries will be installed to dir"
      echo "                       (default PREFIX/lib)"
      echo " -incdir <DIR>       Headers will be installed to dir"
      echo "                       (default PREFIX/include)"
      echo " -sharedir <DIR>     Shared files and translations will be installed"
      echo "                     to dir (default PREFIX/share)"
      echo " -builddir <DIR>     Building in DIR instead of in source dir"
      echo
      echo "Configuration:"
      echo
      echo " -shared             Create and use shared libraries"
      echo " -static             Create and use static libraries"
      echo
      echo " -D <MACRO>          Defines MACRO"
      echo
      echo " -dest-prefix <DIR>  Destination prefix for all binaries"
      echo "                       (default working directory)"
      echo " -rpath <DIR>        Add DIR to library rutime search path"
      echo "                       (default PREFIX/lib, reset to null without DIR)"
      echo " -skip-qt-check      Do not check current Qt version"
      echo " -profile            Turn profiling on, add gcc option '-pg'"
      echo "                       (for development under Linux only)"
      echo " -win32              Turn on cross compilation with i686-mingw32"
      echo "                       (under Linux only)"
      echo " -win64              Turn on cross compilation with x86_64-mingw32"
      echo "                       (under Linux only)"
      echo " -no-svg             Do not compile support for Qt svg"
      echo " -cflags <FLAG>      Add FLAG to the list of compilation flags"
      echo " -sse3               Compile with SSE3 support"
      echo " -march <ARCH>       Specify the name of the target architecture"
      echo "                       Use ARCH=native for auto detection of the CPU's architecture"
      echo "                       Useful link: https://wiki.gentoo.org/wiki/Safe_CFLAGS"
      echo "                       Your architecture is:"
      grep -m1 -A3 "vendor_id" /proc/cpuinfo | awk '{printf("                       ");print}'
      echo
      echo
      echo "Third party libraries:"
      echo
      echo " -I dir              Add dir to the list of directories to be"
      echo "                     searched for headers"
      echo " -L dir              Add dir to the list of directories to be"
      echo "                     searched for libraries"
      echo
      exit
    ;;
    *)
      echo "Bad option $1, see './configure -h' for help"
      exit 2
    ;;
  esac
  shift
done
# If configure called from ./configure.cache, do not overwrite
if [ "$SAVE_CONFIGURE_OPTIONS_IN_CACHE" != "no" ]; then
  (
  cat << END
export SAVE_CONFIGURE_OPTIONS_IN_CACHE="no"
$SHELL configure $COMMANDLINE
END
  ) > configure.cache
  chmod a+x configure.cache
fi
#Check that Qt is correctly installed
if [ "$SKIP_QT_CHECK" = "no" ]; then
  if qmake -v > /dev/null 2>&1; then
    QT_VERSION=$(qmake -v | awk '{if(NR==2) print $4}')
    QT_VERSION_NUM=$(echo $QT_VERSION | awk 'BEGIN{FS="."}{print $1*1000000+$2*1000+$3}')
    if [ "$QT_VERSION_NUM" -lt "5012000" ]; then
      echo "*** ERROR *** : your Qt version is $QT_VERSION."
      echo "                At least version " << qtVersion << " is recommended."
      echo "                If you want to skip this version check,"
      echo "                add option -skip-qt-check."
      exit 2
    fi
  else
    echo "*** ERROR *** : qmake command is not available."
    echo "                Either Qt is not correctly installed"
    echo "                or PATH does not point to Qt binaries."
    exit 2
  fi
fi
# Show license if Makefile does not exist
if [ ! -e Makefile ] && [ "$LICENSE_ACCEPTED" = "no" ]; then
  rm -rf licenses
  mkdir licenses
  for l in $(find . -name "LICENSE.*"); do
    cp $l licenses
  done
  cd licenses
  echo
  echo "This GeopsyPack contains items licensed to you under"
  echo "the terms of all these licenses:"
  echo
  for l in $(ls LICENSE.*); do
    echo "   $l"
  done
  echo
  LICENSE_ACCEPT=""
  while [ "$LICENSE_ACCEPT" != "no" ] && [ "$LICENSE_ACCEPT" != "yes" ]; do
    echo "Type 'view' to view all these licenses."
    echo "Type 'yes' to accept these license offers."
    echo "Type 'no' to decline these license offers."
    echo
    echo -n "Do you accept these license? "
    read LICENSE_ACCEPT
    if [ "$LICENSE_ACCEPT" = "view" ]; then
      echo
      echo "###########################################################"
      echo
      echo "Type SPACE BAR or RETURN to move down, 'q' for next license"
      echo
      echo "###########################################################"
      echo
      sleep 5
      for l in $(ls LICENSE.*); do
        less $l
      done
    fi
  done
  cd ..
  if [ "$LICENSE_ACCEPT" = "no" ]; then
    echo "You are not allowed to use this package."
    exit 2
  fi
fi
echo
# Check for Ubuntu Unity
# Comment this section if you are not running Ubuntu Unity with a recent release > 10.04
if which lsb_release > /dev/null 2>&1; then
  if [ $(lsb_release --id | awk 'BEGIN{FS=":"}{gsub("^[ \t]*", "", $2);print tolower($2)}') = "ubuntu" ]; then
    if [ $(lsb_release --release | awk 'BEGIN{FS=":"}{gsub("^[ \t]*", "", $2);print $2*100}') -gt 1004 ]; then
      COMMANDLINE="$COMMANDLINE -D UBUNTU_UNITY"
    fi
  fi
fi
# Create pro file
(
echo "TEMPLATE=subdirs"
echo "CONFIG += ordered"
echo "SUBDIRS=\"
echo "          mseed \"
echo "          slink \"
echo "          QGpCoreTools \"
echo "          QGpGuiTools \"
echo "          QGpCoreMath \"
echo "          SciFigs \"
echo "          QGpGuiMath \"
echo "          figue \"
echo "          QGpCoreWave \"
echo "          QGpGuiWave \"
echo "          QGpCompatibility \"
echo "          GeopsyCore \"
echo "          GeopsyGui \"
echo "          geopsyfigs \"
echo "          GeopsySLink \"
echo "          GeopsySLinkGui \"
echo "          DinverCore \"
echo "          DinverGui \"
echo "          DinverDCCore \"
echo "          DinverDCGui \"
echo "          QGpCoreStat \"
echo "          ArrayCore \"
echo "          ArrayGui \"
echo "          MonoStation \"
echo "          geopsy-fk \"
echo "          geopsy-spac \"
echo "          geopsy-hv \"
echo "          geopsy \"
echo "          vslarray \"
echo "          dinver \"
echo "          WaranCore \"
echo "          TapePositioningSystem \"
echo "          waran \"
echo "          warangps \"
echo "          geopsyarray \"
echo "          geopsyhv \"
echo "          geopsydamping \"
echo "          geopsytfa \"
echo "          geopsynr \"
echo "          geopsyptmotion \"
echo "          geopsyrefra \"
echo "          hvtfa \"
echo "          campbelltob3 \"
echo "          dinverdc \"
echo "          dinverext \"
echo "          spac2disp \"
echo "          max2curve \"
echo "          gppoisson \"
echo "          gpprofile \"
echo "          gpdc \"
echo "          gplivemodel \"
echo "          gpec8 \"
echo "          gpdcreport \"
echo "          gptarget \"
echo "          gpviewdcreport \"
echo "          gpdcmisfit \"
echo "          gpell \"
echo "          gpgroup2phase \"
echo "          gpmodel2param \"
echo "          gpparam2model \"
echo "          gpdepths \"
echo "          gpsort \"
echo "          gpcurve \"
echo "          gprandom \"
echo "          gpspac \"
echo "          gprefra \"
echo "          gpsignal \"
echo "          gphistogram \"
echo "          gpviewmax \"
echo "          gpdistance \"
echo "          gptime \"
echo "          gpcoord \"
echo "          gpreplace \"
echo "          gpsh \"
echo "          gpmt \"
echo "          gpgridsearch \"
echo "          gpfksimulator \"
echo "          gpmaplayer \"
echo "          dinvermatlab \"
echo "          matfiles \"
echo
) > geopsypack.pro
TEMP_FILE="/tmp/configure_output_$RANDOM"
while [ -e $TEMP_FILE ]; do
  TEMP_FILE="/tmp/configure_output_$RANDOM"
done\n";
echo "Configure mseed"
cd "mseed"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir mseed -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure slink"
cd "slink"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir slink -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpCoreTools"
cd "QGpCoreTools"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreTools -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpGuiTools"
cd "QGpGuiTools"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpGuiTools -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpCoreMath"
cd "QGpCoreMath"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreMath -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure SciFigs"
cd "SciFigs"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir SciFigs -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpGuiMath"
cd "QGpGuiMath"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpGuiMath -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure figue"
cd "figue"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir figue -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpCoreWave"
cd "QGpCoreWave"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreWave -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpGuiWave"
cd "QGpGuiWave"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpGuiWave -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpCompatibility"
cd "QGpCompatibility"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCompatibility -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure GeopsyCore"
cd "GeopsyCore"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsyCore -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure GeopsyGui"
cd "GeopsyGui"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsyGui -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsyfigs"
cd "geopsyfigs"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyfigs -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure GeopsySLink"
cd "GeopsySLink"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsySLink -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure GeopsySLinkGui"
cd "GeopsySLinkGui"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir GeopsySLinkGui -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure DinverCore"
cd "DinverCore"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverCore -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure DinverGui"
cd "DinverGui"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverGui -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure DinverDCCore"
cd "DinverDCCore"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverDCCore -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure DinverDCGui"
cd "DinverDCGui"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir DinverDCGui -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure QGpCoreStat"
cd "QGpCoreStat"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir QGpCoreStat -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure ArrayCore"
cd "ArrayCore"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir ArrayCore -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure ArrayGui"
cd "ArrayGui"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir ArrayGui -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure MonoStation"
cd "MonoStation"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir MonoStation -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsy-fk"
cd "geopsy-fk"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy-fk -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsy-spac"
cd "geopsy-spac"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy-spac -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsy-hv"
cd "geopsy-hv"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy-hv -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsy"
cd "geopsy"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsy -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure vslarray"
cd "vslarray"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir vslarray -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure dinver"
cd "dinver"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinver -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure WaranCore"
cd "WaranCore"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir WaranCore -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure TapePositioningSystem"
cd "TapePositioningSystem"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir TapePositioningSystem -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure waran"
cd "waran"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir waran -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure warangps"
cd "warangps"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir warangps -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsyarray"
cd "geopsyarray"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyarray -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsyhv"
cd "geopsyhv"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyhv -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsydamping"
cd "geopsydamping"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsydamping -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsytfa"
cd "geopsytfa"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsytfa -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsynr"
cd "geopsynr"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsynr -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsyptmotion"
cd "geopsyptmotion"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyptmotion -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure geopsyrefra"
cd "geopsyrefra"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir geopsyrefra -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure hvtfa"
cd "hvtfa"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir hvtfa -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure campbelltob3"
cd "campbelltob3"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir campbelltob3 -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure dinverdc"
cd "dinverdc"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinverdc -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure dinverext"
cd "dinverext"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinverext -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure spac2disp"
cd "spac2disp"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir spac2disp -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure max2curve"
cd "max2curve"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir max2curve -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gppoisson"
cd "gppoisson"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gppoisson -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpprofile"
cd "gpprofile"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpprofile -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpdc"
cd "gpdc"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdc -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gplivemodel"
cd "gplivemodel"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gplivemodel -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpec8"
cd "gpec8"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpec8 -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpdcreport"
cd "gpdcreport"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdcreport -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gptarget"
cd "gptarget"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gptarget -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpviewdcreport"
cd "gpviewdcreport"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpviewdcreport -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpdcmisfit"
cd "gpdcmisfit"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdcmisfit -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpell"
cd "gpell"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpell -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpgroup2phase"
cd "gpgroup2phase"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpgroup2phase -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpmodel2param"
cd "gpmodel2param"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpmodel2param -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpparam2model"
cd "gpparam2model"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpparam2model -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpdepths"
cd "gpdepths"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdepths -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpsort"
cd "gpsort"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpsort -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpcurve"
cd "gpcurve"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpcurve -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gprandom"
cd "gprandom"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gprandom -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpspac"
cd "gpspac"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpspac -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gprefra"
cd "gprefra"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gprefra -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpsignal"
cd "gpsignal"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpsignal -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gphistogram"
cd "gphistogram"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gphistogram -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpviewmax"
cd "gpviewmax"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpviewmax -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpdistance"
cd "gpdistance"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpdistance -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gptime"
cd "gptime"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gptime -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpcoord"
cd "gpcoord"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpcoord -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpreplace"
cd "gpreplace"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpreplace -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpsh"
cd "gpsh"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpsh -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpmt"
cd "gpmt"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpmt -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpgridsearch"
cd "gpgridsearch"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpgridsearch -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpfksimulator"
cd "gpfksimulator"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpfksimulator -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure gpmaplayer"
cd "gpmaplayer"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir gpmaplayer -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure dinvermatlab"
cd "dinvermatlab"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir dinvermatlab -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
echo "Configure matfiles"
cd "matfiles"
echo "$SHELL configure -accept-license -sourcedir $SOURCE_DIR -builddir $BUILD_DIR -buildsubdir matfiles -skip-qt-check -dest-prefix $SOURCE_DIR $COMMANDLINE 2>$TEMP_FILE 1>/dev/null" > tmp
if ! $SHELL tmp; then
  cat $TEMP_FILE
  rm $TEMP_FILE tmp
  exit 2
else
  cat $TEMP_FILE
fi
rm -f tmp $TEMP_FILE
cd ..
# Generate make file
qmake geopsypack.pro
###############################################################
# Final user message
###############################################################
echo
if [ "$PLATFORM" = "MINGW" ]; then
  CONFIGURE_COMMAND="sh configure"
else
  CONFIGURE_COMMAND="./configure"
fi
echo "  geopsypack is now configured for building."
echo
echo "  To proceed, run (if you have 8 cores)"
echo
if [ "${BUILD_DIR}" != "${PROJECT_DIR}" ]; then
  echo "    $ make -j 8 -C ${BUILD_DIR}"
else
  echo "    $ make -j 8"
fi
echo
echo "  Once everything is built, you must run either"
echo
echo "    $ su -c "make install", if root privileges are needed;"
echo "  or"
echo "    $ make install, if user permissions are sufficient."
echo
echo "  The current configuration options are stored in 'configure.cache'."
echo "  To change the configuration, run '$CONFIGURE_COMMAND [options]'."
echo
